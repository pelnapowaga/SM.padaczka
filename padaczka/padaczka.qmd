---
title: "Padaczka_SM"
author: "Agata Adamczyk"
format: html
editor: visual
date-modified: 25.08
---

```{r}
library(readxl)
library(tidyverse)
library(psych)

```

## Przygotowanie bazy

```{r}
padaczka <- read_excel("padaczka.xlsx")  %>% 
  mutate(warunek = "PA") 

padaczka_sm <- read_excel("padaczka_sm.xlsx") %>% 
  mutate(warunek = "PA_SM") 

sm_padaczka <- read_excel("sm_padaczka.xlsx") %>% 
  mutate(warunek = "SM_PA") 

```

```{r}

DF_PAD <- rbind(padaczka, sm_padaczka, padaczka_sm) %>% 
  rename("D9" = "D9q") %>% 
  rename("qdod"  = "qb16")
         

```

## Przekodowanie zmiennych

```{r}
table(DF_PAD$qa14)
table(DF_PAD_2$qa14)

DF_PAD_2 <- DF_PAD %>% 
  mutate(qa1 = ifelse(qa1 == "FALSE", 1, 0),
         qa2 = ifelse(qa2 == "FALSE", 1, 0),
         qa3 = ifelse(qa3 == "TRUE", 1, 0),
         qa4 = ifelse(qa4 == "TRUE", 1, 0),
         qa5 = ifelse(qa5 == "FALSE", 1, 0),
         qa6 = ifelse(qa6 == "FALSE", 1, 0),
         qa7 = ifelse(qa7 == "FALSE", 1, 0),
         qa8 = ifelse(qa8 == "TRUE", 1, 0),
         qa9 = ifelse(qa9 == "FALSE", 1, 0),
         qa10 = ifelse(qa10 == "FALSE", 1, 0),
         qa11 = ifelse(qa11 == "Wszystkie odpowiedzi są prawidłowe", 1, 0),
         qa12 = ifelse(qa12 == "Wszystkie odpowiedzi są prawidłowe", 1, 0),
         qa13 = ifelse(qa13 == "Może uprawiać większość dyscyplin sportowych za wyjątkiem nurkowania i wspinaczki", 1, 0),
         qa14 = ifelse(qa14 == "Przewlekła choroba neurologiczna", 1, 0),
         qa15 = ifelse(qa15 == "Osoby chorujące na padaczkę muszą przyjmować leki do końca swojego życia", 1, 0),
         qb1 = ifelse(qb1 == "FALSE", 1, 0),
         qb2 = ifelse(qb2 == "FALSE", 1, 0),
         qb3 = ifelse(qb3 == "TRUE", 1, 0),
         qb4 = ifelse(qb4 == "TRUE", 1, 0),
         qb5 = ifelse(qb5 == "FALSE", 1, 0),
         qb6 = ifelse(qb6 == "FALSE", 1, 0),
         qb7 = ifelse(qb7 == "FALSE", 1, 0),
         qb8 = ifelse(qb8 == "TRUE", 1, 0),
         qb9 = ifelse(qb9 == "FALSE", 1, 0),
         qb10 = ifelse(qb10 == "FALSE", 1, 0),
         qb11 = ifelse(qb11 == "Wszystkie odpowiedzi są prawidłowe", 1, 0),
         qb12 = ifelse(qb12 == "Wszystkie odpowiedzi są prawidłowe", 1, 0),
         qb13 = ifelse(qb13 == "Może uprawiać większość dyscyplin sportowych za wyjątkiem nurkowania i wspinaczki", 1, 0),
         qb14 = ifelse(qb14 == "Przewlekła choroba neurologiczna", 1, 0),
         qb15 = ifelse(qb15 == "Osoby chorujące na padaczkę muszą przyjmować leki do końca swojego życia", 1, 0)) 

str(DF_PAD_2)
table(DF_PAD$narodowosc)
```

```{r}
table(DF_PAD$wiek)
table(DF_PAD_2$wiek)
table(DF_PAD$plec) 
table(DF_PAD$plec, DF_PAD$wiek)

DF_PAD_2 <- DF_PAD_2 %>% 
  filter(plec == "Kobieta" | plec == "Mężczyzna") %>% 
  mutate(wiek = case_when(
    wiek == "14-15 lat" ~ 14,
    wiek == "15-16 lat" ~ 15,
    wiek == "16-17 lat" ~ 16,
    wiek == "17-18 lat" ~ 17,
    wiek == "18-19 lat" ~ 18,
    wiek == "Powyżej 20 lat" ~ 20)) %>% 
  filter(wiek == 14| wiek == 15 | wiek == 16 | wiek == 17 | wiek == 18)

#wyrzucamy 3 osoby w wieku 20 lat (w tym jedna osoba z płcią inną)
#wyrzucamy 18 osób z płcią inna

```

## Czy ktoś strzelał

```{r}
DF_PAD_2 %>% 
  mutate(nr = row_number()) %>% 
  filter(D6 == "Tak") %>%  #"Znam osobę"
  filter(D7 == "Nie")  #"Nie słyszałem o tej chorobie"

#wyrzucamy 6 osób
DF_PAD_2 <- DF_PAD_2[-c(27,361,431, 468, 511, 554),]

#tutaj wyrzucamy 6 osób i ostatecznie z całej bazy danych zabraliśmy 26 osób; zostajemy z 550 obserwacji
```

## Opis próby

```{r}

DF_PAD_2 %>% 
  group_by(warunek, plec) %>% 
  summarise(N=n())

DF_PAD_2 %>% 
  group_by(warunek) %>% 
  summarise(N=n())

DF_PAD_2 %>% 
  group_by(plec) %>% 
  summarise(N=n())

table(DF_PAD$plec)

DF_PAD_2 %>% 
  group_by( D4) %>% 
  summarise(N=n())

DF_PAD_2 %>% 
  group_by(warunek) %>% 
  summarise(M = round(mean(wiek),2), SD =  round(sd(wiek),2))

DF_PAD_2 %>% 
  summarise(M = round(mean(wiek),2), SD =  round(sd(wiek),2)) 

x - 75
100 220

100 - (75*100)/220
100 - (14*100)/65
100 - (68*100)/265

100 - (157*100)/550


(305*100)/550
```

## Wyniki dwóch części kwestionariusza

```{r}
DF_PAD_3 <- DF_PAD_2 %>% 
  mutate(SUM_A = 
           DF_PAD_2 %>% 
           select(starts_with("qa")) %>% 
           rowSums) %>% 
   mutate(SUM_B = 
           DF_PAD_2 %>% 
           select(starts_with("qb")) %>% 
           rowSums) %>% 
  select(-starts_with(c("qa", "qb")))

```

## Rzetelność kwestionariusza

```{r}

alpha(DF_PAD_2 %>% 
  select(starts_with("qa")))

# raw_alpha = 0.7026256 = 0.70

alpha(DF_PAD_2 %>% 
  select(starts_with("qb")))

# raw_alpha = 0.7433301 = 0.74

```

## Rzetelność kwestionariusza - EFA

```{r}

library(nFactors)
library(GPArotation)
library(psych)



answers_A <- DF_PAD_2 %>% 
  select(starts_with("QA"))


Korelacja <- cor(answers_A,
                 method = "spearman",
                 use = "pairwise.complete.obs")
ev_Dane <- eigen(Korelacja) 
ap_Dane <- parallel(subject=nrow(answers_A),
                    var=ncol(answers_A),
                    rep=701, cent=.05) #stałe (rep - liczba repetycji algorytmu)
nS_Dane <- nScree(x = ev_Dane$values, #wartości własne macierzy korelacji 
                  aparallel = ap_Dane$eigen$qevpea) 
plotnScree(nS_Dane)

#macież korelacji
cor_answers_A<-cor(answers_A, method = "spearman")
View(cor_answers_A) 

sum(cor(cor_answers_A)<0.3)/length(cor_answers_A-14)*100 #87% korelacji jest poniżej 0.3
(sum(cor(cor_answers_A)>0.9)-14)/length(cor_answers_A-14)*100 # 0.44% korelacji jest powyżej 0.9

#wyznacznik macierzy korelacji
det(cor(answers_A)) #0.1307211

#kryterium KMO
KMO(cor(answers_A))

#czy macierz jest macierzą identycznościową
cortest.bartlett(cor(answers_A)) #H0: macierz korelacji jest identycznościowa - dane nie mają ze sobą nic wspólnego; mamy podstawy do orzucenia H0

#właściwa EFA
fit_1<-fa(r = answers_A, nfactors = 4, rotate = "varimax", cor = "tet")
print(fit_1)

# powinna byc dla danych tetrachorycznych, ale wtedy nie wychodzi; do przemyslenia 
# jest sens badać jeden wynik 
# ile wyszło czynników + dodajemy ładunki czynnikowe
# model 1 czynnikowy jest gorzej doapsowany niż 2
# w załączniku

```

## Wykresy gęstości

```{r}

ggplot_df <- DF_PAD_3 %>% 
  select(plec, D4, SUM_A, SUM_B, warunek) %>%
  mutate(A = SUM_A, B = SUM_B) %>% 
  pivot_longer(cols = c(A, B), names_to = "test", values_to = "wynik")

# gęstość całkowika

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") 


# gęstość w podziale na płeć 

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") +
  facet_wrap(vars(plec))

# gęstość w podziale na miejsce zamieszkania

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") +
  facet_wrap(vars(D4))

```

## Przygotowanie danych do testów t i modeli

```{r}
pivot_df_pad <- DF_PAD_3 %>% 
  select(plec, D4, SUM_A, SUM_B, warunek, D5, D9) %>%
  mutate(A = SUM_A, B = SUM_B) %>% 
  pivot_longer(cols = c(A, B), names_to = "test", values_to = "wynik") 

view(pivot_df_pad)
str(pivot_df_pad)
```

## Testy t

```{r}


```

## Modele liniowe

```{r}
DF_PAD_4 <- DF_PAD_3 %>% 
  mutate(wiedza = SUM_B - SUM_A)

#MODEL 1

mod1 <- lm(wiedza ~ D4, data = DF_PAD_4)
summary(mod1)
#istotny intercept i 50 000 - 100 000 mieszkańców

plot(mod1, which = 1)
plot(mod1, which = 2)
plot(mod1, which = 3)

#wszystkie warunki są spełnione; doczytać jeszcze o 3 wykresie i warością powyżje 2

ggplot(DF_PAD_4, aes(x = D4, y = wiedza)) +
  geom_boxplot() +
  theme_bw()

#MODEL 2

mod2 <- lm(wiedza ~ D9, data = DF_PAD_4)
summary(mod2)

plot(mod2, which = 1)
plot(mod2, which = 2)
plot(mod2, which = 3)

#wszystkie warunki są spełnione; doczytać jeszcze o 3 wykresie i warością powyżje 2

ggplot(DF_PAD_4, aes(x = D9, y = wiedza)) +
  geom_boxplot() +
  theme_bw()
```

## ANOVA dla warunków

```{r}

aov_2<-aov(SUM_A ~ warunek, data = DF_PAD_3)
summary(aov_2)

#ANOVA istotna dla warunku; całkiem ciekawe
plot(aov_2)
# spełnione złożenia dla normalności, liniowości i jednorodności warinacji

ggplot(DF_PAD_3, aes(x = warunek, y = SUM_A)) +
  geom_boxplot() + 
  theme_bw() +
  xlab("Warunek") +
  ylab("Wynik testu przed prezentacją")

```

zostało nam wykonanie testów t :) :)
