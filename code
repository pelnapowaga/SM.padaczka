---
title: "SManaliza"
author: Zofia Mikołajczak
format: docx
editor: visual
---

## Przygotowanie bazy danych

```{r}
install.packages("tidyverse")
library(tidyverse)

library(readr)
KWESTIONARIUSZ_SM <- read_delim("nowe_bazy_danych/KWESTIONARIUSZ_SM.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(KWESTIONARIUSZ_SM)

KWESTIONARIUSZ_PADACZKA_SM <- read_delim("nowe_bazy_danych/KWESTIONARIUSZ_PADACZKA- SM.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(KWESTIONARIUSZ_PADACZKA_SM)

KWESTIONARIUSZ_SM_PADACZKA <- read_delim("nowe_bazy_danych/KWESTIONARIUSZ_SM-PADACZKA.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(KWESTIONARIUSZ_SM_PADACZKA)


## wybranie zmiennych z baz danych 

SM<-KWESTIONARIUSZ_SM %>% 
  select(wiek, plec, narodowosc,starts_with(c("D","Q"))) %>% 
  mutate(warunek = "SM")

PA_SM<-KWESTIONARIUSZ_PADACZKA_SM %>% 
  select(wiek, plec, narodowosc,starts_with(c("D","Q"))) %>% 
  mutate(warunek = "PA_SM")

SM_PA<-KWESTIONARIUSZ_SM_PADACZKA %>% 
  select(wiek, plec, narodowosc,starts_with(c("D","Q"))) %>% 
  mutate(warunek = "SM_PA")


#stwirzenie caej bazy danych dla SM; uzyskalismy baze danych z 37 zmiennymi dla 509 obserwacji
DF_SM<-rbind(SM, PA_SM, SM_PA)
str(DF_SM)
view(DF_SM)

```

## Przekodowanie pytan

```{r}

view(a)

DF_SM_2<-DF_SM %>% 
  mutate(QA1 = ifelse (QA1 == 'Immunologicznego', 1, 0),
         QA2 = ifelse (QA2 == 'Przyczyny stwardnienia rozsianego nie są do końca znane', 1, 0),
         QA3 = ifelse (QA3 == 'Wszystkie powyższe odpowiedzi są poprawne', 1, 0),
         QA4 = ifelse (QA4 == 'Wszystkie powyższe odpowiedzi są poprawne', 1, 0),
         QA5 = ifelse (QA5 == 'PRAWDA', 1, 0),
         QA6 = ifelse (QA6 == 'PRAWDA', 1, 0),
         QA7 = ifelse (QA7 == 'PRAWDA', 1, 0), 
         QA8 = ifelse (QA8 == 'PRAWDA', 1, 0), 
         QA9 = ifelse (QA9 == 'PRAWDA', 1, 0), 
         QA10 = ifelse (QA10 == 'PRAWDA', 1, 0), 
         QA11 = ifelse (QA11 == 'PRAWDA', 1, 0), 
         QA12 = ifelse (QA12 == 'FAŁSZ', 1, 0), 
         QA13 = ifelse (QA13 == 'PRAWDA', 1, 0), 
         QA14 = ifelse (QA14 == 'PRAWDA', 1, 0),
         QB1 = ifelse (QB1 == 'Immunologicznego', 1, 0),
         QB2 = ifelse (QB2 == 'Przyczyny stwardnienia rozsianego nie są do końca znane', 1, 0),
         QB3 = ifelse (QB3 == 'Wszystkie powyższe odpowiedzi są poprawne', 1, 0),
         QB4 = ifelse (QB4 == 'Wszystkie powyższe odpowiedzi są poprawne', 1, 0),
         QB5 = ifelse (QB5 == 'PRAWDA', 1, 0),
         QB6 = ifelse (QB6 == 'PRAWDA', 1, 0),
         QB7 = ifelse (QB7 == 'PRAWDA', 1, 0), 
         QB8 = ifelse (QB8 == 'PRAWDA', 1, 0), 
         QB9 = ifelse (QB9 == 'PRAWDA', 1, 0), 
         QB10 = ifelse (QB10 == 'PRAWDA', 1, 0), 
         QB11 = ifelse (QB11 == 'PRAWDA', 1, 0), 
         QB12 = ifelse (QB12 == 'FAŁSZ', 1, 0), 
         QB13 = ifelse (QB13 == 'PRAWDA', 1, 0), 
         QB14 = ifelse (QB14 == 'PRAWDA', 1, 0))





```

## Wyniki dwóch czesci kwestionariusza

```{r}

DF_SM_3 <- DF_SM_2 %>% 
  mutate(SUM_A = 
           DF_SM_2 %>% 
           select(starts_with("QA")) %>% 
           rowSums) %>% 
   mutate(SUM_B = 
           DF_SM_2 %>% 
           select(starts_with("QB")) %>% 
           rowSums) %>% 
  select(-starts_with(c("QA", "QB")))

```

## Rzetelność kwestionariusza 

```{r}
library(psych)

alpha(DF_SM_2 %>% 
  select(starts_with("QA")))

# raw_alpha = 0.8730171, dobra rzetelność


```

## Trafność kwestionariusza - EFA 

```{r}

library(nFactors)
library(GPArotation)

answers <- DF_SM_2 %>% 
  select(starts_with("QA"))

Korelacja <- cor(answers,
                 method = "spearman",
                 use = "pairwise.complete.obs")
ev_Dane <- eigen(Korelacja) #wartości własne macierzy korelacji i własności własne współczynników korelacji? (algebra liniowa)
ap_Dane <- parallel(subject=nrow(answers),
                    var=ncol(answers),
                    rep=701, cent=.05) #stałe (rep - liczba repetycji algorytmu)
nS_Dane <- nScree(x = ev_Dane$values, #wartości własne macierzy korelacji 
                  aparallel = ap_Dane$eigen$qevpea) 
plotnScree(nS_Dane)


answers <- DF_SM_2 %>% 
  select(starts_with("QB"))

Korelacja <- cor(answers,
                 method = "spearman",
                 use = "pairwise.complete.obs")
ev_Dane <- eigen(Korelacja) #wartości własne macierzy korelacji i własności własne współczynników korelacji? (algebra liniowa)
ap_Dane <- parallel(subject=nrow(answers),
                    var=ncol(answers),
                    rep=701, cent=.05) #stałe (rep - liczba repetycji algorytmu)
nS_Dane <- nScree(x = ev_Dane$values, #wartości własne macierzy korelacji 
                  aparallel = ap_Dane$eigen$qevpea) 
plotnScree(nS_Dane)



answers <- DF_SM_2 %>% 
  select(starts_with(c("QA","QB")))

Korelacja <- cor(answers,
                 method = "spearman",
                 use = "pairwise.complete.obs")
ev_Dane <- eigen(Korelacja) #wartości własne macierzy korelacji i własności własne współczynników korelacji? (algebra liniowa)
ap_Dane <- parallel(subject=nrow(answers),
                    var=ncol(answers),
                    rep=701, cent=.05) #stałe (rep - liczba repetycji algorytmu)
nS_Dane <- nScree(x = ev_Dane$values, #wartości własne macierzy korelacji 
                  aparallel = ap_Dane$eigen$qevpea) 
plotnScree(nS_Dane)

#dla QA optymalne są dwa czynniki, a dla QB optymalny jest 1 czynnik; dla połączonej bazy robi się dziwnie

```

## wykres gęstości wyników: pre-test/re-test + płeć + demografia 
```{r}

ggplot_df <- DF_SM_3 %>% 
  select(plec, D4, SUM_A, SUM_B, warunek) %>%
  mutate(A = SUM_A, B = SUM_B) %>% 
  pivot_longer(cols = c(A, B), names_to = "test", values_to = "wynik")

# gęstość całkowika

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") 


# gęstość w podziale na płeć 

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") +
  facet_wrap(vars(plec))

# gęstość w podziale na miejsce zamieszkania

ggplot(ggplot_df, aes(x = wynik)) + 
  geom_density(aes(color = test)) +
  theme_bw() + 
  theme(legend.position="bottom") + 
  ylab("gęstość") +
  facet_wrap(vars(D4))

```

## inne

```{r}
view(DF_SM_3)

hist(DF_SM_3$SUM_A)
hist(DF_SM_3$SUM_B)
table(DF_SM_3$narodowosc) #bez sensu


hist(sqrt(DF_SM_3$SUM_A)) 
hist(log(DF_SM_3$SUM_B + 1)) #ANOVA na skośnej zmiennej zależnej; k-w test

```
